<?php
/*
‡∏™‡∏£‡πâ‡∏≤‡∏á html+ php ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ 
1. fucntion getCandle ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ Asset ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏≥‡πÑ‡∏õ‡∏î‡∏∂‡∏á ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Candle ‡∏à‡∏≤‡∏Å Deriv.com ‡∏ó‡∏µ‡πà ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡πÅ‡∏•‡∏∞ timeframe ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ 60 ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ 
2. function CalIndyADX ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏≥ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Candle ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤ ‡∏°‡∏≤‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ ema3,ema5,adx ‡πÅ‡∏•‡∏∞ Color 6 ‡∏≠‡∏±‡∏ô‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡πâ‡∏ß ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡πà‡∏≤ Strength ‡∏à‡∏≤‡∏Å ADX ‡πÅ‡∏•‡∏∞ Trend
3. function TradeRiseFall ‡πÇ‡∏î‡∏¢‡∏ô‡∏≥‡∏Ñ‡πà‡∏≤ Trend ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠ 2  ‡∏°‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ Trade ‡πÅ‡∏ö‡∏ö Rise/Fall ‡∏ó‡∏µ‡πà 55 Second 
4. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ä‡∏ô‡∏∞ ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ‡πÅ‡∏ö‡∏ö Martingale
5. ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ‡∏ö‡∏ô Table 
6. ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏≥‡∏î‡πâ‡∏ß‡∏¢ php ‡∏•‡πâ‡∏ß‡∏ô‡πÜ 
7.‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤ mock data
lt5UMO6bNvmZQaR
*/
?>
<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Deriv Real Trading System</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }
        h1 {
            text-align: center;
            color: #4a5568;
            margin-bottom: 30px;
            font-size: 2.5rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }
        .config-panel {
            background: #f7fafc;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 30px;
            border: 2px solid #e2e8f0;
        }
        .form-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            font-weight: 600;
            margin-bottom: 5px;
            color: #2d3748;
        }
        input, select {
            width: 100%;
            padding: 12px;
            border: 2px solid #cbd5e0;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s;
        }
        input:focus, select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: transform 0.2s, box-shadow 0.2s;
        }
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
        }
        .status {
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
            font-weight: 600;
        }
        .status.success { background: #c6f6d5; color: #22543d; border: 2px solid #9ae6b4; }
        .status.error { background: #fed7d7; color: #742a2a; border: 2px solid #fc8181; }
        .status.warning { background: #fef5e7; color: #744210; border: 2px solid #f6ad55; }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        }
        th, td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }
        th {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        tr:hover {
            background: #f7fafc;
        }
        .trend-up { color: #38a169; font-weight: bold; }
        .trend-down { color: #e53e3e; font-weight: bold; }
        .loading {
            text-align: center;
            padding: 20px;
            font-size: 18px;
            color: #667eea;
        }
        .real-time {
            background: #e6fffa;
            border: 2px solid #38b2ac;
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üî• Deriv REAL Trading System</h1>
        
        <div class="config-panel">
            <h3>‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á</h3>
            <form method="POST">
                <div class="form-group">
                    <label>Deriv API Token (REAL ACCOUNT):</label>
                    <input type="password" name="api_token" required 
                           placeholder="‡πÉ‡∏™‡πà API Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á"value='lt5UMO6bNvmZQaR'>
                </div>
                <div class="form-group">
                    <label>Asset Symbol:</label>
                    <select name="asset">
                        <option value="R_10">Volatility 10 Index</option>
                        <option value="R_25">Volatility 25 Index</option>
                        <option value="R_50">Volatility 50 Index</option>
                        <option value="R_75">Volatility 75 Index</option>
                        <option value="R_100">Volatility 100 Index</option>
                        <option value="frxEURUSD">EUR/USD</option>
                        <option value="frxGBPUSD">GBP/USD</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (USD):</label>
                    <input type="number" name="initial_amount" value="1" min="0.35" step="0.01">
                </div>
                <div class="form-group">
                    <label>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î:</label>
                    <input type="number" name="max_trades" value="10" min="1" max="20">
                </div>
                <button type="submit" name="start_trading" class="btn">üí∞ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á</button>
            </form>
        </div>

        <?php
        class DerivRealTrader {
            private $apiToken;
            private $wsUrl = 'wss://ws.binaryws.com/websockets/v3?app_id=66726';
            private $apiUrl = 'https://api.deriv.com';
            private $asset;
            private $initialAmount;
            private $maxTrades;
            private $tradeResults = [];
            private $currentAmount;
            private $totalProfit = 0;
            private $appId = 66726; // Default app_id

            public function __construct($apiToken, $asset, $initialAmount, $maxTrades) {
                $this->apiToken = $apiToken;
                $this->asset = $asset;
                $this->initialAmount = $initialAmount;
                $this->maxTrades = $maxTrades;
                $this->currentAmount = $initialAmount;
            }

            // Function 1: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Candle ‡∏à‡∏≤‡∏Å Deriv API ‡∏à‡∏£‡∏¥‡∏á
            public function getCandle($asset, $timeframe = 60, $count = 60) {
                $endTime = time();
                $startTime = $endTime - ($timeframe * $count * 2); // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                
                $data = [
                    'ticks_history' => $asset,
                    'start' => $startTime,
                    'end' => $endTime,
                    'style' => 'candles',
                    'granularity' => $timeframe,
                    'count' => $count,
                    'req_id' => rand(1, 9999)
                ];

                $response = $this->sendWebSocketRequest($data);
                
                if ($response && isset($response['candles'])) {
                    echo '<div class="real-time">‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Candle ‡∏à‡∏≤‡∏Å Deriv ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' . count($response['candles']) . ' ‡πÅ‡∏ó‡πà‡∏á</div>';
                    return $response['candles'];
                } else {
                    echo '<div class="status error">‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Candle ‡πÑ‡∏î‡πâ: ' . ($response['error']['message'] ?? 'Unknown error') . '</div>';
                    return false;
                }
            }

            // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ú‡πà‡∏≤‡∏ô WebSocket API
            private function sendWebSocketRequest($data) {
                $data['app_id'] = $this->appId;
                
                // ‡πÉ‡∏ä‡πâ cURL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HTTP API ‡πÅ‡∏ó‡∏ô WebSocket ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢
                $ch = curl_init();
                curl_setopt_array($ch, [
                    CURLOPT_URL => 'https://api.deriv.com/websockets/v3?app_id=' . $this->appId,
                    CURLOPT_POST => true,
                    CURLOPT_POSTFIELDS => json_encode($data),
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_TIMEOUT => 30,
                    CURLOPT_HTTPHEADER => [
                        'Content-Type: application/json',
                        'Authorization: Bearer ' . $this->apiToken
                    ]
                ]);

                $response = curl_exec($ch);
                $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                $error = curl_error($ch);
                curl_close($ch);

                if ($error) {
                    echo '<div class="status error">cURL Error: ' . $error . '</div>';
                    return false;
                }

                if ($httpCode !== 200) {
                    echo '<div class="status error">HTTP Error: ' . $httpCode . '</div>';
                    return false;
                }

                return json_decode($response, true);
            }

            // Function 2: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA, ADX ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏£‡∏¥‡∏á
            public function CalIndyADX($candles) {
                if (!$candles || count($candles) < 20) {
                    return false;
                }

                $closes = array_column($candles, 'close');
                $highs = array_column($candles, 'high');
                $lows = array_column($candles, 'low');

                // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA
                $ema3 = $this->calculateEMA($closes, 3);
                $ema5 = $this->calculateEMA($closes, 5);
                
                // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ADX
                $adx = $this->calculateADX($highs, $lows, $closes, 14);
                
                // ‡∏î‡∏∂‡∏á 6 ‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                $lastEma3 = array_slice($ema3, -6);
                $lastEma5 = array_slice($ema5, -6);
                $lastAdx = array_slice($adx, -6);
                
                $colors = [];
                for ($i = 0; $i < 6; $i++) {
                    $colors[] = $lastEma3[$i] > $lastEma5[$i] ? 'GREEN' : 'RED';
                }
                
                $latestAdx = end($lastAdx);
                $strength = $this->analyzeStrength($latestAdx);
                $trend = $this->analyzeTrend(end($lastEma3), end($lastEma5), $latestAdx);

                echo '<div class="real-time">üìä ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: Trend=' . $trend . ', ADX=' . number_format($latestAdx, 2) . ', Strength=' . $strength . '</div>';

                return [
                    'ema3' => $lastEma3,
                    'ema5' => $lastEma5,
                    'adx' => $lastAdx,
                    'colors' => $colors,
                    'strength' => $strength,
                    'trend' => $trend,
                    'latest_adx' => $latestAdx
                ];
            }

            private function calculateEMA($data, $period) {
                $ema = [];
                $multiplier = 2 / ($period + 1);
                
                // SMA ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏Å
                $ema[0] = array_sum(array_slice($data, 0, $period)) / $period;
                
                for ($i = 1; $i < count($data); $i++) {
                    $ema[$i] = ($data[$i] * $multiplier) + ($ema[$i-1] * (1 - $multiplier));
                }
                
                return $ema;
            }

            private function calculateADX($highs, $lows, $closes, $period = 14) {
                $plusDM = [];
                $minusDM = [];
                $tr = [];
                $adx = [];

                // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì DM ‡πÅ‡∏•‡∏∞ TR
                for ($i = 1; $i < count($closes); $i++) {
                    $highDiff = $highs[$i] - $highs[$i-1];
                    $lowDiff = $lows[$i-1] - $lows[$i];
                    
                    $plusDM[] = ($highDiff > $lowDiff && $highDiff > 0) ? $highDiff : 0;
                    $minusDM[] = ($lowDiff > $highDiff && $lowDiff > 0) ? $lowDiff : 0;
                    
                    $tr[] = max(
                        $highs[$i] - $lows[$i],
                        abs($highs[$i] - $closes[$i-1]),
                        abs($lows[$i] - $closes[$i-1])
                    );
                }

                // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ADX
                for ($i = $period - 1; $i < count($tr); $i++) {
                    $avgTR = array_sum(array_slice($tr, $i - $period + 1, $period)) / $period;
                    $avgPlusDM = array_sum(array_slice($plusDM, $i - $period + 1, $period)) / $period;
                    $avgMinusDM = array_sum(array_slice($minusDM, $i - $period + 1, $period)) / $period;
                    
                    if ($avgTR > 0) {
                        $plusDI = ($avgPlusDM / $avgTR) * 100;
                        $minusDI = ($avgMinusDM / $avgTR) * 100;
                        
                        if (($plusDI + $minusDI) > 0) {
                            $dx = abs($plusDI - $minusDI) / ($plusDI + $minusDI) * 100;
                            $adx[] = $dx;
                        } else {
                            $adx[] = 0;
                        }
                    } else {
                        $adx[] = 0;
                    }
                }

                return $adx;
            }

            private function analyzeStrength($adxValue) {
                if ($adxValue > 50) return 'Very Strong';
                if ($adxValue > 25) return 'Strong';
                if ($adxValue > 20) return 'Moderate';
                return 'Weak';
            }

            private function analyzeTrend($ema3, $ema5, $adxValue) {
                if ($adxValue < 20) return 'SIDEWAYS';
                return $ema3 > $ema5 ? 'RISE' : 'FALL';
            }

            // Function 3: ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏ú‡πà‡∏≤‡∏ô Deriv API
            public function TradeRiseFall($trend, $amount) {
                $contractType = ($trend == 'RISE') ? 'CALL' : 'PUT';
                
                $buyData = [
                    'buy' => 1,
                    'price' => $amount,
                    'parameters' => [
                        'contract_type' => $contractType,
                        'symbol' => $this->asset,
                        'duration' => 55,
                        'duration_unit' => 's'
                    ],
                    'req_id' => rand(1000, 9999)
                ];

                echo '<div class="real-time">üéØ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î: ' . $contractType . ' ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô $' . $amount . '</div>';
                
                $response = $this->sendWebSocketRequest($buyData);
                
                if ($response && isset($response['buy'])) {
                    $contractId = $response['buy']['contract_id'];
                    echo '<div class="status success">‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à Contract ID: ' . $contractId . '</div>';
                    
                    // ‡∏£‡∏≠‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î (55 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ + buffer)
                    sleep(60);
                    
                    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
                    $result = $this->checkTradeResult($contractId);
                    $result['direction'] = $contractType;
                    $result['amount'] = $amount;
                    $result['trend'] = $trend;
                    $result['time'] = date('H:i:s');
                    $result['contract_id'] = $contractId;
                    
                    return $result;
                } else {
                    echo '<div class="status error">‚ùå ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' . ($response['error']['message'] ?? 'Unknown error') . '</div>';
                    return [
                        'success' => false,
                        'profit' => -$amount,
                        'direction' => $contractType,
                        'amount' => $amount,
                        'trend' => $trend,
                        'time' => date('H:i:s'),
                        'error' => $response['error']['message'] ?? 'Trade failed'
                    ];
                }
            }

            // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏≤‡∏Å Contract ID
            private function checkTradeResult($contractId) {
                $statusData = [
                    'proposal_open_contract' => 1,
                    'contract_id' => $contractId,
                    'req_id' => rand(1000, 9999)
                ];

                $response = $this->sendWebSocketRequest($statusData);
                
                if ($response && isset($response['proposal_open_contract'])) {
                    $contract = $response['proposal_open_contract'];
                    $isWon = isset($contract['is_won']) ? $contract['is_won'] : 0;
                    $profit = isset($contract['profit']) ? floatval($contract['profit']) : 0;
                    
                    return [
                        'success' => $isWon == 1,
                        'profit' => $profit,
                        'payout' => $contract['payout'] ?? 0,
                        'buy_price' => $contract['buy_price'] ?? 0
                    ];
                } else {
                    return [
                        'success' => false,
                        'profit' => -$this->currentAmount,
                        'error' => 'Cannot check trade result'
                    ];
                }
            }

            // Function 4: Martingale Loop ‡∏à‡∏£‡∏¥‡∏á
            public function startTrading() {
                echo '<div class="status warning">üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á...</div>';
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Token
                if (!$this->validateApiToken()) {
                    echo '<div class="status error">‚ùå API Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏ó‡∏£‡∏î</div>';
                    return;
                }
                
                $tradeCount = 0;
                $consecutiveLosses = 0;
                
                while ($tradeCount < $this->maxTrades) {
                    echo '<div class="loading">üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î... (‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà ' . ($tradeCount + 1) . '/' . $this->maxTrades . ')</div>';
                    
                    // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Candle ‡∏à‡∏£‡∏¥‡∏á
                    $candles = $this->getCandle($this->asset);
                    if (!$candles) {
                        echo '<div class="status error">‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î</div>';
                        break;
                    }
                    
                    // 2. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏£‡∏¥‡∏á
                    $analysis = $this->CalIndyADX($candles);
                    if (!$analysis) {
                        echo '<div class="status error">‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ</div>';
                        continue;
                    }
                    
                    // 3. ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á
                    $result = $this->TradeRiseFall($analysis['trend'], $this->currentAmount);
                    
                    // 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•
                    $result['analysis'] = $analysis;
                    $result['trade_number'] = $tradeCount + 1;
                    $this->tradeResults[] = $result;
                    
                    if ($result['success']) {
                        $this->totalProfit += $result['profit'];
                        echo '<div class="status success">üéâ ‡∏ä‡∏ô‡∏∞! ‡∏Å‡∏≥‡πÑ‡∏£: $' . number_format($result['profit'], 2) . '</div>';
                        
                        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏∞
                        $this->currentAmount = $this->initialAmount;
                        $consecutiveLosses = 0;
                        
                        // ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏∞ (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ç‡∏≠)
                        echo '<div class="status success">‚úÖ ‡∏ä‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î</div>';
                        break;
                    } else {
                        $this->totalProfit += $result['profit'];
                        $consecutiveLosses++;
                        echo '<div class="status error">üí∏ ‡πÅ‡∏û‡πâ! ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô: $' . number_format(abs($result['profit']), 2) . '</div>';
                        
                        // Martingale: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô 2 ‡πÄ‡∏ó‡πà‡∏≤
                        $this->currentAmount *= 2;
                        
                        // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
                        if ($this->currentAmount > $this->initialAmount * 32) {
                            echo '<div class="status error">‚ö†Ô∏è ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î</div>';
                            break;
                        }
                    }
                    
                    $tradeCount++;
                    
                    // ‡∏û‡∏±‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏ó‡∏£‡∏î
                    if ($tradeCount < $this->maxTrades) {
                        echo '<div class="loading">‚è≥ ‡∏£‡∏≠ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ...</div>';
                        sleep(30);
                    }
                }
                
                $this->printReport();
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Token
            private function validateApiToken() {
                $data = [
                    'authorize' => $this->apiToken,
                    'req_id' => rand(1000, 9999)
                ];
                
                $response = $this->sendWebSocketRequest($data);
                
                if ($response && isset($response['authorize'])) {
                    echo '<div class="status success">‚úÖ API Token ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - Account: ' . $response['authorize']['email'] . '</div>';
                    return true;
                }
                
                return false;
            }

            // Function 5: ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
            public function printReport() {
                echo '<h3>üìà ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á</h3>';
                
                $totalTrades = count($this->tradeResults);
                $winTrades = array_sum(array_column($this->tradeResults, 'success'));
                $winRate = $totalTrades > 0 ? ($winTrades / $totalTrades) * 100 : 0;
                
                echo '<div class="status ' . ($this->totalProfit >= 0 ? 'success' : 'error') . '">';
                echo '<strong>‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°: $' . number_format($this->totalProfit, 2) . '</strong><br>';
                echo '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ' . $totalTrades . ' | ‡∏ä‡∏ô‡∏∞: ' . $winTrades . ' | ‡πÅ‡∏û‡πâ: ' . ($totalTrades - $winTrades) . '<br>';
                echo '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ä‡∏ô‡∏∞: ' . number_format($winRate, 2) . '%';
                echo '</div>';
                
                if ($totalTrades > 0) {
                    echo '<table>';
                    echo '<tr><th>‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà</th><th>‡πÄ‡∏ß‡∏•‡∏≤</th><th>Contract ID</th><th>‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á</th><th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</th><th>‡∏ú‡∏•</th><th>‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô</th><th>Trend</th><th>ADX</th></tr>';
                    
                    foreach ($this->tradeResults as $trade) {
                        $statusClass = $trade['success'] ? 'trend-up' : 'trend-down';
                        $statusText = $trade['success'] ? '‚úÖ ‡∏ä‡∏ô‡∏∞' : '‚ùå ‡πÅ‡∏û‡πâ';
                        $profitColor = $trade['profit'] >= 0 ? 'trend-up' : 'trend-down';
                        
                        echo '<tr>';
                        echo '<td>' . $trade['trade_number'] . '</td>';
                        echo '<td>' . $trade['time'] . '</td>';
                        echo '<td>' . ($trade['contract_id'] ?? 'N/A') . '</td>';
                        echo '<td>' . $trade['direction'] . '</td>';
                        echo '<td>$' . number_format($trade['amount'], 2) . '</td>';
                        echo '<td class="' . $statusClass . '">' . $statusText . '</td>';
                        echo '<td class="' . $profitColor . '">$' . number_format($trade['profit'], 2) . '</td>';
                        echo '<td>' . $trade['trend'] . '</td>';
                        echo '<td>' . (isset($trade['analysis']['latest_adx']) ? number_format($trade['analysis']['latest_adx'], 2) : 'N/A') . '</td>';
                        echo '</tr>';
                    }
                    
                    echo '</table>';
                }
            }
        }

        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
        if (isset($_POST['start_trading'])) {
            $apiToken = trim($_POST['api_token']);
			$apiToken = 'lt5UMO6bNvmZQaR';
            $asset = $_POST['asset'];
            $initialAmount = (float)$_POST['initial_amount'];
            $maxTrades = (int)$_POST['max_trades'];
            
            if (empty($apiToken)) {
                echo '<div class="status error">‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà API Token</div>';
            } elseif ($initialAmount < 0.35) {
                echo '<div class="status error">‚ùå ‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ $0.35</div>';
            } else {
                set_time_limit(600); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                $trader = new DerivRealTrader($apiToken, $asset, $initialAmount, $maxTrades);
                $trader->startTrading();
            }
        }
        ?>
        
        <div style="margin-top: 30px; padding: 20px; background: #ffebee; border-radius: 10px; border: 2px solid #f44336;">
            <h4>‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç - ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á:</h4>
            <ul>
                <li><strong>‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡∏£‡∏î‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á</strong> - ‡∏≠‡∏≤‡∏à‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</li>
                <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Token ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Trading</li>
                <li>‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡πâ‡∏≠‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö</li>
                <li>‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î</li>
            </ul>
        </div>
    </div>

    <script>
    // Auto refresh ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡πÅ‡∏ö‡∏ö real-time
    setTimeout(function() {
        if (document.querySelector('.loading')) {
            location.reload();
        }
    }, 30000);
    </script>
</body>
</html>